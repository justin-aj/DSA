from collections import deque

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not subRoot:
            return True
        if not root:
            return False
        
        queue = deque([root])
        
        while queue:
            node = queue.popleft()

            if node and node.val == subRoot.val:
                if self.isSameTree(node, subRoot):
                    return True

            if node:
                queue.extend([node.left, node.right])
        
        return False


    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        queue1 = deque([p])
        queue2 = deque([q])
        
        while queue1 and queue2:
            node1 = queue1.popleft()
            node2 = queue2.popleft()

            if not node1 and not node2:
                continue
            
            if not node1 or not node2 or node1.val != node2.val:
                return False

            queue1.extend([node1.left, node1.right])
            queue2.extend([node2.left, node2.right])

        return not queue1 and not queue2
